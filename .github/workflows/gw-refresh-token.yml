name: GW Refresh Token

on:
  workflow_dispatch:
  # Every 2 days at 12:00 UTC (Monâ€“Sun). Adjust time if you prefer.
  schedule:
    - cron: "0 12 */2 * *"

# IMPORTANT: allow updating repo secrets with GITHUB_TOKEN
permissions:
  contents: read
  actions: write

concurrency:
  group: gw-refresh
  cancel-in-progress: true

jobs:
  refresh:
    runs-on: ubuntu-latest

    steps:
      - name: Fetch JWT from GammaWizard (login)
        id: gw
        env:
          GW_EMAIL: ${{ secrets.GW_EMAIL }}
          GW_PASSWORD: ${{ secrets.GW_PASSWORD }}
        shell: bash
        run: |
          set -euo pipefail
          # Call auth endpoint
          RESP="$(curl -sS -X POST 'https://gandalf.gammawizard.com/goauth/authenticateFireUser' \
                    -d "email=${GW_EMAIL}" -d "password=${GW_PASSWORD}")"

          # Extract token robustly; fail if missing
          TOKEN="$(python - <<'PY'
import json,sys
try:
    j=json.load(sys.stdin)
    t=j.get("token") or ""
    if not t:
        raise SystemExit(2)
    print(t)
except Exception:
    raise SystemExit(2)
PY
          <<<"$RESP")" || { echo "ERROR: No token in response"; echo "$RESP"; exit 1; }

          # Mask the token in logs
          echo "::add-mask::${TOKEN}"

          # Optional: decode exp (human-friendly audit)
          EXP_TS="$(python - <<'PY'
import base64,json,sys,time
t=sys.stdin.read().strip()
parts=t.split('.')
if len(parts)<2: print(""); raise SystemExit(0)
p=parts[1] + "==="
p=p.replace('-', '+').replace('_','/')
try:
    payload=json.loads(base64.b64decode(p))
    print(str(payload.get("exp","")))
except Exception:
    print("")
PY
          <<<"$TOKEN")"
          if [[ -n "${EXP_TS}" ]]; then
            # Convert to ISO (UTC)
            EXP_ISO="$(date -u -d @"${EXP_TS}" +%Y-%m-%dT%H:%M:%SZ 2>/dev/null || true)"
            echo "Token exp (UTC): ${EXP_ISO}"
            echo "exp_unix=${EXP_TS}" >> "$GITHUB_OUTPUT"
            echo "exp_iso=${EXP_ISO}" >> "$GITHUB_OUTPUT"
          fi

          # Pass token to next step
          echo "token=${TOKEN}" >> "$GITHUB_OUTPUT"

      - name: Update GW_TOKEN repository secret
        uses: actions/github-script@v7
        with:
          # Use built-in GITHUB_TOKEN (requires actions: write at top)
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sodium = require('tweetsodium');

            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            // 1) Get repo public key for secrets
            const { data: pub } = await github.request(
              'GET /repos/{owner}/{repo}/actions/secrets/public-key',
              { owner, repo }
            );

            const key = pub.key;
            const key_id = pub.key_id;

            // 2) Encrypt the new token (from previous step output)
            const messageBytes = Buffer.from(process.env.NEW_TOKEN);
            const keyBytes     = Buffer.from(key, 'base64');
            const encryptedBytes = sodium.seal(messageBytes, keyBytes);
            const encrypted_value = Buffer.from(encryptedBytes).toString('base64');

            // 3) Put the secret
            await github.request(
              'PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}',
              {
                owner, repo,
                secret_name: 'GW_TOKEN',
                encrypted_value,
                key_id
              }
            );

            core.info('GW_TOKEN secret updated.')
        env:
          NEW_TOKEN: ${{ steps.gw.outputs.token }}

      # Optional: store expiry as a repo variable for observability
      - name: Update variables with expiry (optional)
        if: ${{ steps.gw.outputs.exp_iso != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            const exp_iso  = process.env.EXP_ISO;
            const exp_unix = process.env.EXP_UNIX;

            // Create/Update repo variables
            await github.request('PATCH /repos/{owner}/{repo}', {
              owner, repo
            });

            await github.request('PUT /repos/{owner}/{repo}/actions/variables/{name}', {
              owner, repo, name: 'GW_TOKEN_EXP_ISO', value: exp_iso
            }).catch(async () => {
              await github.request('POST /repos/{owner}/{repo}/actions/variables', {
                owner, repo, name: 'GW_TOKEN_EXP_ISO', value: exp_iso
              });
            });

            await github.request('PUT /repos/{owner}/{repo}/actions/variables/{name}', {
              owner, repo, name: 'GW_TOKEN_EXP_UNIX', value: exp_unix
            }).catch(async () => {
              await github.request('POST /repos/{owner}/{repo}/actions/variables', {
                owner, repo, name: 'GW_TOKEN_EXP_UNIX', value: exp_unix
              });
            });

            core.info(`GW_TOKEN expiry recorded: ${exp_iso}`)
        env:
          EXP_ISO:  ${{ steps.gw.outputs.exp_iso }}
          EXP_UNIX: ${{ steps.gw.outputs.exp_unix }}
