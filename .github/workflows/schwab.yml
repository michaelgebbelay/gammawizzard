# .github/workflows/schwab-place.yml
# yamllint disable rule:line-length rule:truthy
name: Schwab Place

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["LeoCross Ticket"]
    types: [completed]

concurrency:
  group: schwab-place
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  place:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install --quiet schwab-py google-api-python-client google-auth google-auth-httplib2 pandas-market-calendars pytz

      - name: Time gate (SOFT; bypassable)
        id: gate
        env:
          BYPASS_TIME_GATE: ${{ vars.BYPASS_TIME_GATE }}
          GATE_WINDOW_MIN: 15
          GATE_TARGET_OFFSET_MIN: 12
        run: |
          python - <<'PY'
          import os, time, datetime as dt, pytz
          import pandas_market_calendars as mcal
          # Hard bypass if BYPASS_TIME_GATE=1
          if (os.environ.get('BYPASS_TIME_GATE','') == '1'):
              print("GATE BYPASS"); 
              with open(os.environ['GITHUB_OUTPUT'],'a') as fh: fh.write("ok=true\n")
              raise SystemExit(0)
          et = pytz.timezone('America/New_York')
          now = dt.datetime.now(et)
          window = int(os.environ.get('GATE_WINDOW_MIN','15'))
          offset = int(os.environ.get('GATE_TARGET_OFFSET_MIN','12'))
          nyse = mcal.get_calendar('XNYS')
          sched = nyse.schedule(start_date=now.date(), end_date=now.date(), tz='America/New_York')
          ok=False
          if not sched.empty:
              close = sched['market_close'].iloc[0]
              target = close + dt.timedelta(minutes=offset)
              diff = abs((now - target).total_seconds())/60.0
              ok = (diff <= window)       # soft gate, symmetric
              print("GATE", "ok" if ok else "skip", f"diff={diff:.2f}m target={target.strftime('%H:%M')}")
          else:
              print("GATE skip NOT_TRADING_DAY")
          with open(os.environ['GITHUB_OUTPUT'],'a') as fh: fh.write(f"ok={'true' if ok else 'false'}\n")
          PY

      - name: Place SPXW order from leocross!A2 and log at schwab!A2
        if: ${{ steps.gate.outputs.ok == 'true' }}
        env:
          # Required secrets
          SCHWAB_APP_KEY:    ${{ secrets.SCHWAB_APP_KEY }}
          SCHWAB_APP_SECRET: ${{ secrets.SCHWAB_APP_SECRET }}
          SCHWAB_TOKEN_JSON: ${{ secrets.SCHWAB_TOKEN_JSON }}
          GSHEET_ID:         ${{ secrets.GSHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
          # Optional account selection
          SCHWAB_ACCT_HASH:  ${{ vars.SCHWAB_ACCT_HASH }}
          # Arm
          SCHWAB_PLACE: place
          # Ladder timing
          STAGE_SEC: ${{ vars.STAGE_SEC || 45 }}
          TICK: 0.05
          # Sizing
          SIZE_MODE:        ${{ vars.SIZE_MODE || 'PCT_BP' }}
          CREDIT_ALLOC_PCT: ${{ vars.CREDIT_ALLOC_PCT || 0.06 }}
          DEBIT_ALLOC_PCT:  ${{ vars.DEBIT_ALLOC_PCT  || 0.02 }}
          RISK_PER_CONTRACT_CREDIT: ${{ vars.RISK_PER_CONTRACT_CREDIT || 300 }}
          RISK_PER_CONTRACT_DEBIT:  ${{ vars.RISK_PER_CONTRACT_DEBIT  || 200 }}
          MAX_RISK_PER_TRADE: ${{ vars.MAX_RISK_PER_TRADE || 1500 }}
          MAX_QTY:          ${{ vars.MAX_QTY || 6 }}
          MIN_QTY:          ${{ vars.MIN_QTY || 1 }}
          HARD_QTY_CUTOFF:  ${{ vars.HARD_QTY_CUTOFF || 10 }}
          BP_SOURCE:        ${{ vars.BP_SOURCE || 'OPTION' }}
          OPT_BP_OVERRIDE:  ${{ vars.OPT_BP_OVERRIDE || 0 }}
          # Guards still active (freshness/expiry), but NO liquidity checks in code
          FRESH_MIN:               ${{ vars.FRESH_MIN || 120 }}
          ENFORCE_EXPIRY_TOMORROW: ${{ vars.ENFORCE_EXPIRY_TOMORROW || 'true' }}
          # Optional: emergency & cancel
          EMERGENCY_MIN_TO_CLOSE: ${{ vars.EMERGENCY_MIN_TO_CLOSE || 2 }}
          CANCEL_IF_UNFILLED:     ${{ vars.CANCEL_IF_UNFILLED || 'true' }}
        run: |
          python scripts/schwab_place_order.py

      - name: Skipped (outside gate)
        if: ${{ steps.gate.outputs.ok != 'true' }}
        run: echo "Outside soft gate (set BYPASS_TIME_GATE=1 to force)."
