name: Schwab Probe

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["LeoCross Ticket"]   # must match the 'name:' in leocross.yml
    types: [completed]

concurrency:
  group: schwab-probe-${{ github.event.workflow_run.id || github.run_id }}
  cancel-in-progress: false

jobs:
  probe:
    # Auto-run only when LeoCross succeeded; always allow manual runs
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install --quiet schwab-py google-api-python-client google-auth google-auth-httplib2

      - name: Account hash + quote -> Sheet (tab: schwab)
        env:
          SCHWAB_APP_KEY: ${{ secrets.SCHWAB_APP_KEY }}
          SCHWAB_APP_SECRET: ${{ secrets.SCHWAB_APP_SECRET }}
          SCHWAB_TOKEN_JSON: ${{ secrets.SCHWAB_TOKEN_JSON }}
          GSHEET_ID: ${{ secrets.GSHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        run: |
          python - << 'PY'
          import os, json
          from datetime import datetime, timezone
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from schwab.auth import client_from_token_file

          open("schwab_token.json","w").write(os.environ["SCHWAB_TOKEN_JSON"])
          c = client_from_token_file(
              api_key=os.environ["SCHWAB_APP_KEY"],
              app_secret=os.environ["SCHWAB_APP_SECRET"],
              token_path="schwab_token.json")

          r = c.get_account_numbers(); r.raise_for_status()
          acct = r.json()[0]
          acct_hash  = acct["hashValue"]
          acct_last4 = acct["accountNumber"][-4:]

          sym = "SPX"
          q = c.get_quote(sym)
          if q.status_code != 200 or sym not in q.json():
              sym = "SPY"; q = c.get_quote(sym)
          q.raise_for_status()
          last = q.json().get(sym, {}).get("quote", {}).get("lastPrice", "")

          sa = json.loads(os.environ["GOOGLE_SERVICE_ACCOUNT_JSON"])
          creds = service_account.Credentials.from_service_account_info(sa, scopes=["https://www.googleapis.com/auth/spreadsheets"])
          s = build("sheets","v4",credentials=creds)
          sid = os.environ["GSHEET_ID"]; tab = "schwab"

          meta = s.spreadsheets().get(spreadsheetId=sid).execute()
          titles = [sh["properties"]["title"] for sh in meta.get("sheets",[])]
          if tab not in titles:
              s.spreadsheets().batchUpdate(spreadsheetId=sid, body={"requests":[{"addSheet":{"properties":{"title":tab}}}]}).execute()

          hdr = [["ts","source","account_hash","account_last4","symbol","last_price"]]
          got = s.spreadsheets().values().get(spreadsheetId=sid, range=f"{tab}!1:1").execute().get("values", [])
          if not got:
              s.spreadsheets().values().update(spreadsheetId=sid, range=f"{tab}!1:1", valueInputOption="USER_ENTERED", body={"values": hdr}).execute()

          now = datetime.now(timezone.utc).isoformat()
          s.spreadsheets().values().append(spreadsheetId=sid, range=f"{tab}!A1", valueInputOption="USER_ENTERED", insertDataOption="INSERT_ROWS", body={"values": [[now,"SCHWAB_PROBE",acct_hash,acct_last4,sym,last]]}).execute()
          print("schwab: append ok")
          PY

      - name: Verify last row (schwab)
        env:
          GSHEET_ID: ${{ secrets.GSHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        run: |
          python - << 'PY'
          import os, json
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          sa = json.loads(os.environ["GOOGLE_SERVICE_ACCOUNT_JSON"])
          creds = service_account.Credentials.from_service_account_info(sa, scopes=["https://www.googleapis.com/auth/spreadsheets"])
          s = build("sheets","v4",credentials=creds)
          sid = os.environ["GSHEET_ID"]; tab="schwab"
          vals = s.spreadsheets().values().get(spreadsheetId=sid, range=f"{tab}!A1:Z10000").execute().get("values", [])
          last = vals[-1] if vals else []
          print("LAST_ROW", last)
          with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as f:
            f.write("### Schwab last row\n\n```\n"+ "|".join(last) + "\n```\n")
          PY
