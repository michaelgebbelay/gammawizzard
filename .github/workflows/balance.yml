name: Schwab Balance Check
on:
  workflow_dispatch: {}
jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps
        run: pip install --quiet schwab-py
      - name: Print balances
        env:
          SCHWAB_APP_KEY:     ${{ secrets.SCHWAB_APP_KEY }}
          SCHWAB_APP_SECRET:  ${{ secrets.SCHWAB_APP_SECRET }}
          SCHWAB_TOKEN_JSON:  ${{ secrets.SCHWAB_TOKEN_JSON }}
        run: |
          python - <<'PY'
          import os, json, base64
          from schwab.auth import client_from_token_file
          token_env = os.environ.get("SCHWAB_TOKEN_JSON","")
          token_path = "/tmp/schwab_token.json"
          if token_env:
              try:
                  dec = base64.b64decode(token_env).decode("utf-8")
                  if dec.strip().startswith("{"): token_env = dec
              except Exception: pass
              open(token_path,"w").write(token_env)
          c = client_from_token_file(token_path, os.environ["SCHWAB_APP_KEY"], os.environ["SCHWAB_APP_SECRET"])
          r = c.get_accounts(); r.raise_for_status(); data = r.json()
          def hunt(d):
              out={"initialBalances":{},"currentBalances":{},"projectedBalances":{},"id":None}
              st=[d]; 
              while st:
                  x=st.pop()
                  if isinstance(x,dict):
                      for k,v in x.items():
                          if k in out and isinstance(v,dict): out[k]=v
                          if k in ("accountNumber","accountId") and out["id"] is None: out["id"]=v
                          if isinstance(v,(dict,list)): st.append(v)
                  elif isinstance(x,list): st.extend(x)
              return out
          accs = data if isinstance(data,list) else [data]
          rows=[]
          for a in accs:
              b=hunt(a); i=b["initialBalances"]; cbal=b["currentBalances"]; p=b["projectedBalances"]
              def pick(d,*ks):
                  for k in ks:
                      if isinstance(d,dict) and d.get(k) is not None: return d[k]
              rows.append({
                "account": b["id"] or "UNKNOWN",
                "opening_cash": pick(i,"cashBalance","cashAvailableForTrading","liquidationValue"),
                "opening_equity": pick(i,"equity","liquidationValue"),
                "current_cash": pick(cbal,"cashBalance","cashAvailableForTrading"),
                "current_buying_power": pick(cbal,"buyingPower","cashBuyingPower","dayTradingBuyingPower"),
                "current_equity": pick(cbal,"equity","liquidationValue"),
                "projected_cash": pick(p,"cashBalance","cashAvailableForTrading"),
              })
          print(json.dumps(rows, indent=2))
          PY
