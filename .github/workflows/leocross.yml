name: Place LeoCross

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'PLACER_MODE: NOW | SCHEDULED'
        required: true
        default: 'NOW'
      force:
        description: 'Bypass guard checks (WOULD_CLOSE / partial-overlap) and place anyway? (true/false)'
        required: false
        default: 'false'
      force_qty:
        description: 'Qty override (blank = compute from $)'
        required: false
        default: ''
      sizing_override:
        description: 'Override account value used for sizing (USD). Blank = use Schwab.'
        required: false
        default: ''
      width_picker:
        description: 'Use live width picker for credit days? (true/false)'
        required: true
        default: 'true'
      side_override:
        description: 'AUTO | CREDIT | DEBIT'
        required: false
        default: 'AUTO'
      ignore_cutoff:
        description: 'Ignore the 16:15 ET cutoff? (true/false)'
        required: false
        default: 'false'

concurrency:
  group: leocross-min
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 12

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install --quiet schwab-py requests google-api-python-client google-auth google-auth-httplib2

      # ---------- WIDTH PICKER (optional) ----------
      - name: Width picker (optional)
        if: ${{ github.event.inputs.width_picker == 'true' }}
        id: widthpicker
        env:
          # Auth
          SCHWAB_APP_KEY:    ${{ secrets.SCHWAB_APP_KEY }}
          SCHWAB_APP_SECRET: ${{ secrets.SCHWAB_APP_SECRET }}
          SCHWAB_TOKEN_JSON: ${{ secrets.SCHWAB_TOKEN_JSON }}
          GW_TOKEN:          ${{ secrets.GW_TOKEN }}
          GW_EMAIL:          ${{ secrets.GW_EMAIL }}
          GW_PASSWORD:       ${{ secrets.GW_PASSWORD }}

          # Picker knobs
          DEFAULT_CREDIT_WIDTH: "20"               # base width for EV gate comparison
          EV_MIN_ADVANTAGE: "0.10"                 # only switch if EV improves by > $0.10
          CANDIDATE_CREDIT_WIDTHS: "15,20,25,30,40,50"
          SELECTOR: "EV"                            # explicit: EV | CREDIT_PER_WIDTH | CREDIT_PER_MAX_LOSS

          # Historical win% used by EV math
          WINP_STD_JSON:  '{"5":0.714,"15":0.791,"20":0.816,"25":0.840,"30":0.863,"40":0.889,"50":0.916}'

          # Ratios only inform the “edge vs 5‑wide” column (cosmetic)
          RATIO_STD_JSON:  '{"5":1.0,"15":2.55,"20":3.175,"25":3.6625,"30":4.15,"40":4.85,"50":5.375}'
        run: |
          python scripts/trade/leocross_width_picker.py
          echo "Picked width: ${{ steps.widthpicker.outputs.picked_width }}"
          echo "Picker metric: ${{ steps.widthpicker.outputs.picked_metric }}"
          echo "EV picked/base/delta: ${{ steps.widthpicker.outputs.picked_ev }} / ${{ steps.widthpicker.outputs.base_ev }} / ${{ steps.widthpicker.outputs.delta_ev }}"
          echo "5-wide mid: ${{ steps.widthpicker.outputs.five_mid }}"

      - name: Show picker outputs
        if: ${{ github.event.inputs.width_picker == 'true' }}
        run: |
          echo "Picked width: ${{ steps.widthpicker.outputs.picked_width }}"
          echo "Picker metric: ${{ steps.widthpicker.outputs.picked_metric }}"
          echo "EV picked/base/delta: ${{ steps.widthpicker.outputs.picked_ev }} / ${{ steps.widthpicker.outputs.base_ev }} / ${{ steps.widthpicker.outputs.delta_ev }}"
          echo "5-wide mid: ${{ steps.widthpicker.outputs.five_mid }}"

      - name: LeoCross orchestrator (guard + run)
        env:
          # Mode
          PLACER_MODE: ${{ github.event.inputs.mode != '' && github.event.inputs.mode || 'NOW' }}

          # Guard bypass toggles (position/overlap checks only)
          BYPASS_GUARD: ${{ github.event.inputs.force }}
          BYPASS_QTY:   ${{ github.event.inputs.force_qty }}
          SIZING_DOLLARS_OVERRIDE: ${{ github.event.inputs.sizing_override }}
          #SIDE_OVERRIDE: ${{ github.event.inputs.side_override }}

          # ===== Credentials =====
          SCHWAB_APP_KEY:    ${{ secrets.SCHWAB_APP_KEY }}
          SCHWAB_APP_SECRET: ${{ secrets.SCHWAB_APP_SECRET }}
          SCHWAB_TOKEN_JSON: ${{ secrets.SCHWAB_TOKEN_JSON }}
          GSHEET_ID:                   ${{ secrets.GSHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
          GW_TOKEN:    ${{ secrets.GW_TOKEN }}
          GW_EMAIL:    ${{ secrets.GW_EMAIL }}
          GW_PASSWORD: ${{ secrets.GW_PASSWORD }}

          # ===== Picker outputs (CREDIT ONLY; blank on DEBIT) =====
          CREDIT_PUT_WIDTH:  ${{ steps.widthpicker.outputs.picked_put_width  }}
          CREDIT_CALL_WIDTH: ${{ steps.widthpicker.outputs.picked_call_width }}
          CALL_MULT:         ${{ steps.widthpicker.outputs.call_mult || '2' }}
          SIDE_OVERRIDE:     ${{ github.event.inputs.side_override || 'AUTO' }}
          
          # ===== Trading knobs (fast two-pass) =====
          STEP_WAIT: "5"
          MIN_RUNG_WAIT: "5"
          MAX_LADDER_CYCLES: "2"
          CANCEL_SETTLE_SECS: "0.8"

          # Cutoff: flip to 23:59 when ignore_cutoff=true
          HARD_CUTOFF_HHMM: ${{ github.event.inputs.ignore_cutoff == 'true' && '23:59' || '16:15' }}

          # Width chosen by picker (or default)
          CREDIT_SPREAD_WIDTH: "${{ steps.widthpicker.outputs.picked_width != '' && steps.widthpicker.outputs.picked_width || '20' }}"
          CREDIT_MIN_WIDTH: "5"

          # Verbose logs
          VERBOSE: "1"
          PYTHONUNBUFFERED: "1"
        run: |
          python scripts/trade/leocross_orchestrator.py
