name: LeoCross Ticket
on:
  workflow_dispatch:

jobs:
  leocross:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install --quiet requests google-api-python-client google-auth google-auth-httplib2

      - name: Check required secrets
        env:
          GW_TOKEN: ${{ secrets.GW_TOKEN }}
          GSHEET_ID: ${{ secrets.GSHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        run: |
          set -e
          [ -n "${GW_TOKEN}" ] || { echo "GW_TOKEN is EMPTY"; exit 1; }
          [ -n "${GSHEET_ID}" ] || { echo "GSHEET_ID is EMPTY"; exit 1; }
          [ -n "${GOOGLE_SERVICE_ACCOUNT_JSON}" ] || { echo "GOOGLE_SERVICE_ACCOUNT_JSON is EMPTY"; exit 1; }
          echo "All required secrets are set."

      - name: Find leocross_ticket.py
        id: findscript
        run: |
          set -e
          SCRIPT_PATH="$(git ls-files | grep -E '(^|/)leocross_ticket\.py$' | head -n 1 || true)"
          [ -n "$SCRIPT_PATH" ] || { echo "leocross_ticket.py not found"; exit 1; }
          echo "script=$SCRIPT_PATH" >> "$GITHUB_OUTPUT"

      - name: Get LeoCross JSON
        env:
          GW_TOKEN: ${{ secrets.GW_TOKEN }}
        run: |
          set -e
          URL="https://gandalf.gammawizard.com/rapi/GetLeoCross"
          echo "GET $URL"
          HTTP_CODE=$(curl -sS --fail-with-body -o resp.json -w '%{http_code}' \
            -H "Authorization: Bearer $GW_TOKEN" "$URL" || true)
          echo "HTTP: $HTTP_CODE"
          head -c 300 resp.json || true
          echo
          [ "$HTTP_CODE" = "200" ] || { echo "Non-200 from LeoCross"; exit 1; }

      - name: Run leocross_ticket.py
        env:
          GW_TOKEN: ${{ secrets.GW_TOKEN }}
        run: |
          set -e
          python "${{ steps.findscript.outputs.script }}" | tee ticket_output.txt

      - name: Insert into Google Sheet at row 2 (tab: leocross)
        env:
          GSHEET_ID: ${{ secrets.GSHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
          # Optional overrides; defaults are 3 (credit) / 1 (debit)
          LEO_SIZE_CREDIT: ${{ vars.LEO_SIZE_CREDIT }}
          LEO_SIZE_DEBIT:  ${{ vars.LEO_SIZE_DEBIT }}
        run: |
          python - << 'PY'
          import os, json, re
          from datetime import datetime, timezone
          from google.oauth2 import service_account
          from googleapiclient.discovery import build

          def read_json(p):
              try:
                  with open(p,'r',encoding='utf-8',errors='ignore') as f: return json.load(f)
              except Exception: return {}
          def read_text(p):
              try:
                  with open(p,'r',encoding='utf-8',errors='ignore') as f: return f.read()
              except Exception: return ""
          def to_int(x):
              try: return int(float(str(x).strip()))
              except Exception: return None

          api = read_json("resp.json")
          txt = read_text("ticket_output.txt")

          # Parse core line
          m1 = re.search(r'(\d{4}-\d{2}-\d{2})\s*(?:->|\u2192)\s*(\d{4}-\d{2}-\d{2})\s*:\s*([A-Z_]+)\s*qty\s*=\s*(\d+)\s*width\s*=\s*([0-9.]+)', txt)
          signal_date = m1.group(1) if m1 else ""
          expiry      = m1.group(2) if m1 else ""
          side        = (m1.group(3) if m1 else "") or ""
          orig_qty    = to_int(m1.group(4)) if m1 else None
          width       = m1.group(5) if m1 else ""

          # Spreads
          mS = re.search(r'Strikes?\s+P\s+(\d+(?:\.\d+)?)\s*/\s*(\d+(?:\.\d+)?)\s+C\s+(\d+(?:\.\d+)?)\s*/\s*(\d+(?:\.\d+)?)', txt, re.I)
          p_low  = mS.group(1) if mS else ""; p_high = mS.group(2) if mS else ""
          c_low  = mS.group(3) if mS else ""; c_high = mS.group(4) if mS else ""
          put_spread  = f"{p_low}/{p_high}" if p_low and p_high else ""
          call_spread = f"{c_low}/{c_high}" if c_low and c_high else ""

          # Probs + risk
          mP = re.search(r'Probs.*?Cat1\s*=\s*([0-9.]+)\s+Cat2\s*=\s*([0-9.]+)', txt, re.I)
          cat1 = mP.group(1) if mP else ""
          cat2 = mP.group(2) if mP else ""
          mW = re.search(r'Worst[^A-Za-z0-9]+case(?:\s+day)?\s+loss:\s*\$?([0-9,.-]+)', txt, re.I)
          worst_day_loss = (mW.group(1).replace(',','') if mW else "")

          # OCC legs
          legs = re.findall(r'\b(BUY|SELL)\s+([A-Z0-9_.]+[CP]\d+)', txt, re.I)
          def pick(leg_list, instr, pc):
              for instr_, sym in leg_list:
                  if instr_.upper()==instr and re.search(pc, sym, re.I): return sym
              return ""
          occ_buy_put   = pick(legs,"BUY",r'P')
          occ_sell_put  = pick(legs,"SELL",r'P')
          occ_sell_call = pick(legs,"SELL",r'C')
          occ_buy_call  = pick(legs,"BUY",r'C')

          # Trade snapshot
          trade = {}
          if isinstance(api.get("Trade"), list) and api["Trade"]:
              trade = api["Trade"][-1]
          elif isinstance(api.get("Trade"), dict):
              trade = api["Trade"]
          spx  = str(trade.get("SPX",""))
          vix  = str(trade.get("VIX",""))
          rv5  = str(trade.get("RV5","")); rv10 = str(trade.get("RV10","")); rv20 = str(trade.get("RV20",""))
          dte  = str(trade.get("M",""))

          summary = next((ln.strip() for ln in txt.splitlines() if ln.strip()), "")

          # Sizing: 3 credit, 1 debit (overridable via repo variables)
          s_up = side.upper()
          credit = (s_up.startswith("SHORT") or "CREDIT" in s_up)
          debit  = (s_up.startswith("LONG")  or "DEBIT"  in s_up) or not credit
          def _env_int(k, dflt): 
              try: return int(os.environ.get(k) or dflt)
              except: return dflt
          qty_exec = _env_int("LEO_SIZE_CREDIT",3) if credit else _env_int("LEO_SIZE_DEBIT",1)
          credit_or_debit = "credit" if credit else "debit"

          headers = [
            "ts","signal_date","expiry","side","credit_or_debit","orig_qty","qty_exec","width",
            "put_spread","call_spread",
            "occ_buy_put","occ_sell_put","occ_sell_call","occ_buy_call",
            "cat1","cat2","worst_day_loss",
            "spx","vix","rv20","rv10","rv5","dte",
            "summary"
          ]
          row = [
            datetime.now(timezone.utc).isoformat(),
            signal_date, expiry, side, credit_or_debit, (orig_qty if orig_qty is not None else ""), qty_exec, width,
            put_spread, call_spread,
            occ_buy_put, occ_sell_put, occ_sell_call, occ_buy_call,
            cat1, cat2, worst_day_loss,
            spx, vix, rv20, rv10, rv5, dte,
            summary
          ]

          # Sheets: ensure header row, then INSERT a new row 2 and write A2
          sa = json.loads(os.environ["GOOGLE_SERVICE_ACCOUNT_JSON"])
          creds = service_account.Credentials.from_service_account_info(sa, scopes=["https://www.googleapis.com/auth/spreadsheets"])
          s = build("sheets","v4",credentials=creds)
          sid = os.environ["GSHEET_ID"]; tab = "leocross"

          # header
          got = s.spreadsheets().values().get(spreadsheetId=sid, range=f"{tab}!1:1").execute().get("values", [])
          if not got or got[0] != headers:
              s.spreadsheets().values().update(
                spreadsheetId=sid, range=f"{tab}!1:1",
                valueInputOption="USER_ENTERED", body={"values":[headers]}
              ).execute()

          # sheetId to insert at row 2
          meta = s.spreadsheets().get(spreadsheetId=sid).execute()
          sheet_id = None
          for sh in meta.get("sheets", []):
              if sh["properties"]["title"] == tab:
                  sheet_id = sh["properties"]["sheetId"]; break

          s.spreadsheets().batchUpdate(
            spreadsheetId=sid,
            body={"requests":[{"insertDimension":{
              "range":{"sheetId":sheet_id,"dimension":"ROWS","startIndex":1,"endIndex":2},
              "inheritFromBefore": False
            }}]}
          ).execute()

          s.spreadsheets().values().update(
            spreadsheetId=sid, range=f"{tab}!A2",
            valueInputOption="USER_ENTERED",
            body={"values":[row]}
          ).execute()

          print(f"leocross: inserted at row 2 (qty_exec={qty_exec}, {credit_or_debit})")
          PY
